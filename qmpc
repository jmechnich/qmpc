#!/usr/bin/env python

import signal, sip, socket, sys
sip.setapi('QVariant', 2)

from PyQt4.Qt import *

from qmpclib.player      import Player
from qmpclib.browser     import Browser
from qmpclib.playlist    import Playlist
from qmpclib.mpdwrapper  import MPDWrapper
from qmpclib.preferences import Prefs
from qmpclib.imagehelper import ImageHelper


class ClickableLabel(QLabel):
    clicked = pyqtSignal()
    
    def __init__(self, text="", parent=None):
        super(ClickableLabel,self).__init__(text,parent)
        self.setFrameStyle(QFrame.Panel | QFrame.Raised);
        self.setLineWidth(2);
        self.setAlignment(Qt.AlignCenter)

    def mousePressEvent(self,ev):
        self.clicked.emit()

class DataModel(object):
    def __init__(self):
        super(DataModel,self).__init__()
        self.servers     = QStandardItemModel(0,3)
        self.selected    = ''
        self.autoconnect = False
        
    def loadSettings(self):
        settings = QSettings()
        servers = settings.value("servers", None)
        self.servers.clear()
        if servers:
            for s in servers:
                self.servers.appendRow([QStandardItem(str(i)) for i in s])
        self.selected    = str(settings.value("selected", self.selected))
        self.autoconnect = bool(settings.value("autoconnect", self.autoconnect))
        
    def saveSettings(self):
        settings = QSettings()
        servers = []
        if self.servers:
            for row in xrange(self.servers.rowCount()):
                entry = []
                for col in xrange(self.servers.columnCount()):
                    entry += [self.servers.item(row,col).text()]
                servers += [entry]
        if len(servers):
            settings.setValue("servers", servers)
        else:
            settings.setValue("servers", None)
        settings.setValue("selected", str(self.selected))
        settings.setValue("autoconnect", bool(self.autoconnect))

    def selectedServer(self):
        selectedServer = []
        if self.selected:
            result = self.servers.findItems( self.selected)
            if len(result):
                mi = result[0]
                row = mi.row()
                for col in xrange(self.servers.columnCount()):
                    selectedServer += [self.servers.item(row,col).text()]
        return selectedServer

class Widget(QWidget):
    __images__ = {
        'background':           "images/background.png",
    }
    
    __icons__  = {
        'volumeButton':         "general_speaker",
        'settingsButton':       "keyboard_menu",
        'prevButton':           "/etc/hildon/theme/mediaplayer/Back.png",
        'prevButtonPressed':    "/etc/hildon/theme/mediaplayer/BackPressed.png",
        'playButton':           "/etc/hildon/theme/mediaplayer/Play.png",
        'pauseButton':          "/etc/hildon/theme/mediaplayer/Pause.png",
        'stopButton':           "/etc/hildon/theme/mediaplayer/Stop.png",
        'stopButtonPressed':    "/etc/hildon/theme/mediaplayer/StopPressed.png",
        'nextButton':           "/etc/hildon/theme/mediaplayer/Forward.png",
        'nextButtonPressed':    "/etc/hildon/theme/mediaplayer/ForwardPressed.png",
        'repeatButton':         "/etc/hildon/theme/mediaplayer/Repeat.png",
        'repeatButtonPressed':  "/etc/hildon/theme/mediaplayer/RepeatPressed.png",
        'shuffleButton':        "/etc/hildon/theme/mediaplayer/Shuffle.png",
        'shuffleButtonPressed': "/etc/hildon/theme/mediaplayer/ShufflePressed.png",
    }

    def __init__(self):
        super(Widget,self).__init__()
        self.initData()
        self.initMPD()
        self.initGUI()
        QTimer.singleShot(100,self.deferredStart)

    def deferredStart(self):
        if self.data.autoconnect: self.connectMPD()

    def initData(self):
        self.data = DataModel()
        self.data.loadSettings()
        
        self.imagehelper = ImageHelper(images=self.__images__,
                                       icons=self.__icons__)

    def initGUI(self):
        self.setWindowTitle(QApplication.applicationName())
        self.setAttribute( Qt.WA_Maemo5StackedWindow)
        self.setWindowFlags( self.windowFlags() | Qt.Window)
        
        # set background image
        p = self.palette()
        p.setBrush(QPalette.Background, QBrush(self.imagehelper.background))
        self.setPalette(p)
        
        layout = QVBoxLayout()
        layout.setContentsMargins(0,0,0,50)
        layout.addStretch(1)
        self.connectButton = ClickableLabel("Press <b>HERE</b> to connect")
        #self.connectButton.setFlat(True)
        self.connectButton.setMinimumWidth( 300)
        self.connectButton.clicked.connect(self.connectActivated)
        layout.addWidget( self.connectButton, 0, Qt.AlignCenter)
        self.setLayout(layout)

        # create subwidgets
        self.player   = Player(self.mpd,self)
        self.player.setAttribute( Qt.WA_Maemo5StackedWindow)
        self.player.setWindowFlags( self.player.windowFlags() | Qt.Window)

        self.playlist = Playlist(self.mpd,self.player)
        self.playlist.setAttribute( Qt.WA_Maemo5StackedWindow)
        self.playlist.setWindowFlags( self.playlist.windowFlags() | Qt.Window)

        self.browser  = Browser(self.mpd,self.player)
        self.browser.setAttribute( Qt.WA_Maemo5StackedWindow)
        self.browser.setWindowFlags( self.browser.windowFlags() | Qt.Window)
        
        # create all menu bars
        self.menu = QMenuBar(self)
        self.actionPlayer = QAction("Player",self.menu)
        self.actionPlayer.triggered.connect(self.player.show)
        self.menu.addAction(self.actionPlayer)
        self.actionPlaylist = QAction("Playlist",self.menu)
        self.actionPlaylist.triggered.connect(self.playlist.show)
        self.menu.addAction(self.actionPlaylist)
        self.actionBrowser = QAction("Browser",self.menu)
        self.actionBrowser.triggered.connect(self.browser.show)
        self.menu.addAction(self.actionBrowser)
        self.actionStats = QAction("Statistics",self.menu)
        self.actionStats.triggered.connect(self.showStats)
        self.menu.addAction(self.actionStats)
        self.actionConnect = QAction("Connect",self.menu)
        self.actionConnect.triggered.connect(self.connectActivated)
        self.menu.addAction(self.actionConnect)
        self.menu.addAction("Preferences", self.showPrefs)
        self.setActionsEnabled(False)

        playerMenu = QMenuBar(self.player)
        playerMenu.addAction(self.actionPlaylist)
        playerMenu.addAction(self.actionBrowser)
        
    def initMPD(self):
        self.mpd = MPDWrapper()
        self.mpdtimer = None
    
    def connectActivated(self):
        if self.actionConnect.text() == "Connect":
            self.connectMPD()
        else:
            self.disconnectMPD()

    def connectMPD(self,reconnect=False):
        selected = self.data.selectedServer()
        if not len(selected):
            QMaemo5InformationBox.information(
                self, "Select server to connect",
                QMaemo5InformationBox.DefaultTimeout)
            self.showPrefs()

        selected = self.data.selectedServer()
        if len(selected):
            name, address, port = selected
            try:
                if not reconnect:
                    self.connectButton.setText("Connecting...")
                    QMaemo5InformationBox.information(
                        self, "Connecting to <b>%s</b>" % name,
                        QMaemo5InformationBox.DefaultTimeout)
                    QApplication.processEvents()
                self.mpd.connect( str(address), int(port))
                if not reconnect:
                    QMaemo5InformationBox.information(
                        self, "Connected to <b>%s</b>" % name,
                        QMaemo5InformationBox.DefaultTimeout)
                    QApplication.processEvents()
                    self.setActionsEnabled(True)
                    self.player.show()
                self.mpdtimer = self.startTimer(5000)
            except socket.gaierror, e:
                self.setActionsEnabled(False)
                self.showStartScreen()
                QMaemo5InformationBox.information(
                        self, "%s: %s" %(name,e[1]),
                        QMaemo5InformationBox.DefaultTimeout)
                QApplication.processEvents()
            except socket.error, e:
                self.setActionsEnabled(False)
                self.showStartScreen()
                QMaemo5InformationBox.information(
                        self, "%s: %s" %(name,e[1]),
                        QMaemo5InformationBox.DefaultTimeout)
                QApplication.processEvents()

    def disconnectMPD(self, reconnect=False):
        self.killTimer(self.mpdtimer)
        if not reconnect:
            message = "Disconnected"
            selected = self.data.selectedServer()
            if len(selected): message += (" from <b>%s</b>" % selected[0])
            QMaemo5InformationBox.information(
                self, message, QMaemo5InformationBox.DefaultTimeout)
            QApplication.processEvents()
            self.setActionsEnabled(False)
            self.showStartScreen()
            self.player.reset()
            self.browser.reset()
            self.playlist.reset()
        self.mpd.disconnect()
        
    def showStartScreen(self):
        self.player.hide()
        self.playlist.hide()
        self.browser.hide()
    
    def showStats(self):
        try:    stats = self.mpd.stats()
        except: return
        d = QDialog(self)
        d.setWindowTitle("Statistics")
        layout = QGridLayout()
        layout.addWidget(QLabel("Artists:"),0,0)
        layout.addWidget(QLabel(stats['artists']),0,1)
        layout.addWidget(QLabel("Albums:"),1,0)
        layout.addWidget(QLabel(stats['albums']),1,1)
        layout.addWidget(QLabel("Songs:"),2,0)
        layout.addWidget(QLabel(stats['songs']),2,1)
        layout.addWidget(QLabel("Uptime:"),0,2)
        layout.addWidget(QLabel(self.mpd.prettyPrintSecs(stats['uptime'])),0,3)
        layout.addWidget(QLabel("Playtime:"),1,2)
        layout.addWidget(QLabel(self.mpd.prettyPrintSecs(stats['playtime'])),1,3)
        layout.addWidget(QLabel("DB Playtime:"),2,2)
        layout.addWidget(QLabel(self.mpd.prettyPrintSecs(stats['db_playtime'])),2,3)
        d.setLayout(layout)
        d.exec_()

    def setActionsEnabled(self,state):
        self.actionPlayer.setEnabled(state)
        self.actionPlaylist.setEnabled(state)
        self.actionBrowser.setEnabled(state)
        self.actionStats.setEnabled(state)
        if state:
            selected = self.data.selectedServer()
            if not len(selected): return
            self.actionConnect.setText("Disconnect")
            self.connectButton.setText("Connected to <b>%s</b>" %
                                       selected[0])
        else:
            self.actionConnect.setText("Connect")
            self.connectButton.setText("Press <b>HERE</b> to connect")
    
    def showPrefs(self):
        s = Prefs(self.data)
        s.exec_()

    def closeEvent(self,e):
        self.data.saveSettings()
        e.accept()

    def timerEvent(self,e):
        try:
            self.mpd.ping()
        except:
            self.disconnectMPD(True)
            self.connectMPD(True)

def main():
    signal.signal(signal.SIGINT, signal.SIG_DFL)
    a = QApplication(sys.argv)
    a.setApplicationName("qmpc")
    a.setOrganizationName("mechnich")
    w = Widget()
    w.show()
    return a.exec_()

if __name__ == "__main__":
    main()
